<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1StarShape.htm">StarShape</a>
  </div>
</div>
<div class="contents">
<h1>sf::StarShape Class Reference<br/>
<small>
[<a class="el" href="group__graphics.htm">Graphics module</a>]</small>
</h1><!-- doxytag: class="sf::StarShape" --><!-- doxytag: inherits="sf::Shape" -->
<p>Specialized shape representing a star.  
<a href="#_details">More...</a></p>

<p><code>#include &lt;<a class="el" href="StarShape_8hpp_source.htm">StarShape.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::StarShape:</div>
<div class="dynsection">
 <div class="center">
  <img src="classsf_1_1StarShape.png" usemap="#sf::StarShape_map" alt=""/>
  <map id="sf::StarShape_map" name="sf::StarShape_map">
<area href="classsf_1_1Shape.htm" alt="sf::Shape" shape="rect" coords="59,56,168,80"/>
<area href="classsf_1_1Drawable.htm" alt="sf::Drawable" shape="rect" coords="0,0,109,24"/>
<area href="classsf_1_1Transformable.htm" alt="sf::Transformable" shape="rect" coords="119,0,228,24"/>
</map>
 </div>
</div>

<p><a href="classsf_1_1StarShape-members.htm">List of all members.</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1StarShape.htm#a2bd6cb1ed84544cd4f8ca79b7f18aee8">StarShape</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#a2bd6cb1ed84544cd4f8ca79b7f18aee8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1StarShape.htm#a72d06658a1c6069285859531ab9b8ca8">StarShape</a> (float innerRadius, float outerRadius, unsigned int pointsCount)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#a72d06658a1c6069285859531ab9b8ca8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1StarShape.htm#a9d1a8ff7843245fe9ba8287f2213268f">SetInnerRadius</a> (float radius)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the inner radius of the star.  <a href="#a9d1a8ff7843245fe9ba8287f2213268f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1StarShape.htm#a92468bd2ce3972ec1c4c8276af8fad31">GetInnerRadius</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the inner radius of the star.  <a href="#a92468bd2ce3972ec1c4c8276af8fad31"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1StarShape.htm#ab42807a59f501245be77333ec7c15d94">SetOuterRadius</a> (float radius)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the outer radius of the star.  <a href="#ab42807a59f501245be77333ec7c15d94"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1StarShape.htm#aae6da0526b9d090868199c786eb8333f">GetOuterRadius</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the outer radius of the star.  <a href="#aae6da0526b9d090868199c786eb8333f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1StarShape.htm#ab2ae4d53bb9d1a19b514fa22c5b28b5e">SetPointsCount</a> (unsigned int count)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the number of points of the star.  <a href="#ab2ae4d53bb9d1a19b514fa22c5b28b5e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1StarShape.htm#ab53fbcb322e394fbcc949cc6d4ede5c1">GetPointsCount</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the number of points of the star.  <a href="#ab53fbcb322e394fbcc949cc6d4ede5c1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#aa504985c807b0fad604d8f465b101eac">SetTexture</a> (const <a class="el" href="classsf_1_1Texture.htm">Texture</a> *texture, bool resetRect=false)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the source texture of the shape.  <a href="#aa504985c807b0fad604d8f465b101eac"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#a683942a1d9f73e3a4a4cce696f4de5a8">SetTextureRect</a> (const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;rect)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the sub-rectangle of the texture that the shape will display.  <a href="#a683942a1d9f73e3a4a4cce696f4de5a8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#a95e789deebb0ff62c2432e7d9208db5d">SetFillColor</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;color)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the fill color of the shape.  <a href="#a95e789deebb0ff62c2432e7d9208db5d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#a36725cb6bc3960c25ad8557497cd7c0e">SetOutlineColor</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;color)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the outline color of the shape.  <a href="#a36725cb6bc3960c25ad8557497cd7c0e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#a0094b9e71d54b22cf7960196b756cf5d">SetOutlineThickness</a> (float thickness)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the thickness of the shape's outline.  <a href="#a0094b9e71d54b22cf7960196b756cf5d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Texture.htm">Texture</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#ab079dac4be2b9e07a3b94857aa1db9af">GetTexture</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the source texture of the shape.  <a href="#ab079dac4be2b9e07a3b94857aa1db9af"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#a564c7f2e7d72b92f7f3f559e7fa15ae8">GetTextureRect</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the sub-rectangle of the texture displayed by the shape.  <a href="#a564c7f2e7d72b92f7f3f559e7fa15ae8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#af148835680669b50f099e6d8fefd28b5">GetFillColor</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the fill color of the shape.  <a href="#af148835680669b50f099e6d8fefd28b5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#a5616fffb1b1afabb6ed258e649be07cf">GetOutlineColor</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the outline color of the shape.  <a href="#a5616fffb1b1afabb6ed258e649be07cf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#a0710225235c6badfb9a1044c70e4f8be">GetOutlineThickness</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the outline thickness of the shape.  <a href="#a0710225235c6badfb9a1044c70e4f8be"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Rect.htm">FloatRect</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#aacb095e40da9f6b7eaddc90d271b9e9e">GetLocalBounds</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the local bounding rectangle of the entity.  <a href="#aacb095e40da9f6b7eaddc90d271b9e9e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Rect.htm">FloatRect</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#ad8bbca3a35c836bddd357bb0adc841da">GetGlobalBounds</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the global bounding rectangle of the entity.  <a href="#ad8bbca3a35c836bddd357bb0adc841da"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a23e3447019dbf7737cf7157efdc3ad5f">SetPosition</a> (float x, float y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the position of the object.  <a href="#a23e3447019dbf7737cf7157efdc3ad5f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a9d89da0e2300b5f2f6e49f453705a1ec">SetPosition</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;position)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the position of the object.  <a href="#a9d89da0e2300b5f2f6e49f453705a1ec"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a32e251bce9d3ec1f6138f9c2620f1fdf">SetRotation</a> (float angle)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the orientation of the object.  <a href="#a32e251bce9d3ec1f6138f9c2620f1fdf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a46f3510b3c7138966acadaccdd6ddc27">SetScale</a> (float factorX, float factorY)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the scale factors of the object.  <a href="#a46f3510b3c7138966acadaccdd6ddc27"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a7965d61fc6baf35dd38f955afc44bd05">SetScale</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;factors)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the scale factors of the object.  <a href="#a7965d61fc6baf35dd38f955afc44bd05"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#aff0049432eb92eb9b68c15c5d5bf9d4c">SetOrigin</a> (float x, float y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the local origin of the object.  <a href="#aff0049432eb92eb9b68c15c5d5bf9d4c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a794cec5a92a49691c7d610365b43f0c5">SetOrigin</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;origin)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the local origin of the object.  <a href="#a794cec5a92a49691c7d610365b43f0c5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a9835d23abb46417d3b84d38b1794a5b0">GetPosition</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the position of the object.  <a href="#a9835d23abb46417d3b84d38b1794a5b0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a7322a76a688141ca6c1eaf4c760d87bf">GetRotation</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the orientation of the object.  <a href="#a7322a76a688141ca6c1eaf4c760d87bf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#aecb7be76a7e2814578a145e471c9a567">GetScale</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the current scale of the object.  <a href="#aecb7be76a7e2814578a145e471c9a567"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#aabdfd759cee3462216c1d24a4387b394">GetOrigin</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the local origin of the object.  <a href="#aabdfd759cee3462216c1d24a4387b394"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#af059b6c94e8a92bbc14fb1e5057ef05f">Move</a> (float offsetX, float offsetY)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Move the object by a given offset.  <a href="#af059b6c94e8a92bbc14fb1e5057ef05f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a321c61deeec0e579e2d2a3e48eaea3cb">Move</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;offset)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Move the object by a given offset.  <a href="#a321c61deeec0e579e2d2a3e48eaea3cb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a551eae00ea66318a6fb88a97098c5c6a">Rotate</a> (float angle)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate the object.  <a href="#a551eae00ea66318a6fb88a97098c5c6a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a8ff62d6a41e4bbd4786730ee0eefddc9">Scale</a> (float factorX, float factorY)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Scale the object.  <a href="#a8ff62d6a41e4bbd4786730ee0eefddc9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a9152b4e86d27716a2593aae8ae951931">Scale</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;factor)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Scale the object.  <a href="#a9152b4e86d27716a2593aae8ae951931"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Transform.htm">Transform</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a8495105affb9cd380e43db2bedcae081">GetTransform</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the combined transform of the object.  <a href="#a8495105affb9cd380e43db2bedcae081"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Transform.htm">Transform</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a8bcabc18a0bd9dc3f7dfba8a5f4e9a0c">GetInverseTransform</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the inverse of the combined transform of the object.  <a href="#a8bcabc18a0bd9dc3f7dfba8a5f4e9a0c"></a><br/></td></tr>
<tr><td colspan="2"><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#a477978650b42a0d6b3b234baeb7a093c">Update</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Recompute the internal geometry of the shape.  <a href="#a477978650b42a0d6b3b234baeb7a093c"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Specialized shape representing a star. </p>
<p>This class inherits all the functions of <a class="el" href="classsf_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale.">sf::Transformable</a> (position, rotation, scale, bounds, .</p>
<p>..) as well as the functions of <a class="el" href="classsf_1_1Shape.htm" title="Base class for textured shapes with outline.">sf::Shape</a> (outline, color, texture, ...).</p>
<p>Usage example: </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1StarShape.htm" title="Specialized shape representing a star.">sf::StarShape</a> star;
 star.<a class="code" href="classsf_1_1StarShape.htm#a9d1a8ff7843245fe9ba8287f2213268f" title="Set the inner radius of the star.">SetInnerRadius</a>(25);
 star.<a class="code" href="classsf_1_1StarShape.htm#a9d1a8ff7843245fe9ba8287f2213268f" title="Set the inner radius of the star.">SetInnerRadius</a>(40);
 star.<a class="code" href="classsf_1_1StarShape.htm#ab2ae4d53bb9d1a19b514fa22c5b28b5e" title="Set the number of points of the star.">SetPointsCount</a>(6);
 star.<a class="code" href="classsf_1_1Shape.htm#a36725cb6bc3960c25ad8557497cd7c0e" title="Set the outline color of the shape.">SetOutlineColor</a>(<a class="code" href="classsf_1_1Color.htm#a127dbf55db9c07d0fa8f4bfcbb97594a" title="Red predefined color.">sf::Color::Red</a>);
 star.<a class="code" href="classsf_1_1Shape.htm#a0094b9e71d54b22cf7960196b756cf5d" title="Set the thickness of the shape&amp;#39;s outline.">SetOutlineThickness</a>(5);
 star.<a class="code" href="classsf_1_1Transformable.htm#a23e3447019dbf7737cf7157efdc3ad5f" title="Set the position of the object.">SetPosition</a>(10, 20);
 ...
 window.Draw(star);
</pre></div><dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm" title="Base class for textured shapes with outline.">sf::Shape</a>, <a class="el" href="classsf_1_1CircleShape.htm" title="Specialized shape representing a circle.">sf::CircleShape</a>, <a class="el" href="classsf_1_1RectangleShape.htm" title="Specialized shape representing a rectangle.">sf::RectangleShape</a>, <a class="el" href="classsf_1_1ConvexShape.htm" title="Specialized shape representing a convex polygon.">sf::ConvexShape</a> </dd></dl>

<p>Definition at line <a class="el" href="StarShape_8hpp_source.htm#l00040">40</a> of file <a class="el" href="StarShape_8hpp_source.htm">StarShape.hpp</a>.</p>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a2bd6cb1ed84544cd4f8ca79b7f18aee8"></a><!-- doxytag: member="sf::StarShape::StarShape" ref="a2bd6cb1ed84544cd4f8ca79b7f18aee8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::StarShape::StarShape </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="a72d06658a1c6069285859531ab9b8ca8"></a><!-- doxytag: member="sf::StarShape::StarShape" ref="a72d06658a1c6069285859531ab9b8ca8" args="(float innerRadius, float outerRadius, unsigned int pointsCount)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::StarShape::StarShape </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>innerRadius</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>outerRadius</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>pointsCount</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>innerRadius</em>&nbsp;</td><td>Inner radius of the star </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>outerRadius</em>&nbsp;</td><td>Outer radius of the star </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pointsCount</em>&nbsp;</td><td>Number of points of the star </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="af148835680669b50f099e6d8fefd28b5"></a><!-- doxytag: member="sf::StarShape::GetFillColor" ref="af148835680669b50f099e6d8fefd28b5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a>&amp; sf::Shape::GetFillColor </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the fill color of the shape. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Fill color of the shape</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm#a95e789deebb0ff62c2432e7d9208db5d" title="Set the fill color of the shape.">SetFillColor</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad8bbca3a35c836bddd357bb0adc841da"></a><!-- doxytag: member="sf::StarShape::GetGlobalBounds" ref="ad8bbca3a35c836bddd357bb0adc841da" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Rect.htm">FloatRect</a> sf::Shape::GetGlobalBounds </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the global bounding rectangle of the entity. </p>
<p>The returned rectangle is in global coordinates, which means that it takes in account the transformations (translation, rotation, scale, ...) that are applied to the entity. In other words, this function returns the bounds of the sprite in the global 2D world's coordinate system.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Global bounding rectangle of the entity </dd></dl>

</div>
</div>
<a class="anchor" id="a92468bd2ce3972ec1c4c8276af8fad31"></a><!-- doxytag: member="sf::StarShape::GetInnerRadius" ref="a92468bd2ce3972ec1c4c8276af8fad31" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::StarShape::GetInnerRadius </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the inner radius of the star. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Inner radius of the star</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1StarShape.htm#a9d1a8ff7843245fe9ba8287f2213268f" title="Set the inner radius of the star.">SetInnerRadius</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8bcabc18a0bd9dc3f7dfba8a5f4e9a0c"></a><!-- doxytag: member="sf::StarShape::GetInverseTransform" ref="a8bcabc18a0bd9dc3f7dfba8a5f4e9a0c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Transform.htm">Transform</a>&amp; sf::Transformable::GetInverseTransform </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the inverse of the combined transform of the object. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Inversed of the combined transformations applied to the object</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a8495105affb9cd380e43db2bedcae081" title="Get the combined transform of the object.">GetTransform</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aacb095e40da9f6b7eaddc90d271b9e9e"></a><!-- doxytag: member="sf::StarShape::GetLocalBounds" ref="aacb095e40da9f6b7eaddc90d271b9e9e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Rect.htm">FloatRect</a> sf::Shape::GetLocalBounds </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the local bounding rectangle of the entity. </p>
<p>The returned rectangle is in local coordinates, which means that it ignores the transformations (translation, rotation, scale, ...) that are applied to the entity. In other words, this function returns the bounds of the entity in the entity's coordinate system.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Local bounding rectangle of the entity </dd></dl>

</div>
</div>
<a class="anchor" id="aabdfd759cee3462216c1d24a4387b394"></a><!-- doxytag: member="sf::StarShape::GetOrigin" ref="aabdfd759cee3462216c1d24a4387b394" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; sf::Transformable::GetOrigin </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the local origin of the object. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current origin</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#aff0049432eb92eb9b68c15c5d5bf9d4c" title="Set the local origin of the object.">SetOrigin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aae6da0526b9d090868199c786eb8333f"></a><!-- doxytag: member="sf::StarShape::GetOuterRadius" ref="aae6da0526b9d090868199c786eb8333f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::StarShape::GetOuterRadius </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the outer radius of the star. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Outer radius of the star</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1StarShape.htm#ab42807a59f501245be77333ec7c15d94" title="Set the outer radius of the star.">SetOuterRadius</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5616fffb1b1afabb6ed258e649be07cf"></a><!-- doxytag: member="sf::StarShape::GetOutlineColor" ref="a5616fffb1b1afabb6ed258e649be07cf" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a>&amp; sf::Shape::GetOutlineColor </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the outline color of the shape. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Outline color of the shape</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm#a36725cb6bc3960c25ad8557497cd7c0e" title="Set the outline color of the shape.">SetOutlineColor</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0710225235c6badfb9a1044c70e4f8be"></a><!-- doxytag: member="sf::StarShape::GetOutlineThickness" ref="a0710225235c6badfb9a1044c70e4f8be" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Shape::GetOutlineThickness </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the outline thickness of the shape. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Outline thickness of the shape</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm#a0094b9e71d54b22cf7960196b756cf5d" title="Set the thickness of the shape&#39;s outline.">SetOutlineThickness</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab53fbcb322e394fbcc949cc6d4ede5c1"></a><!-- doxytag: member="sf::StarShape::GetPointsCount" ref="ab53fbcb322e394fbcc949cc6d4ede5c1" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::StarShape::GetPointsCount </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the number of points of the star. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Number of points of the star</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1StarShape.htm#ab2ae4d53bb9d1a19b514fa22c5b28b5e" title="Set the number of points of the star.">SetPointsCount</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9835d23abb46417d3b84d38b1794a5b0"></a><!-- doxytag: member="sf::StarShape::GetPosition" ref="a9835d23abb46417d3b84d38b1794a5b0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; sf::Transformable::GetPosition </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the position of the object. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current position</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a23e3447019dbf7737cf7157efdc3ad5f" title="Set the position of the object.">SetPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7322a76a688141ca6c1eaf4c760d87bf"></a><!-- doxytag: member="sf::StarShape::GetRotation" ref="a7322a76a688141ca6c1eaf4c760d87bf" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Transformable::GetRotation </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the orientation of the object. </p>
<p>The rotation is always in the range [0, 360].</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current rotation, in degrees</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a32e251bce9d3ec1f6138f9c2620f1fdf" title="Set the orientation of the object.">SetRotation</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aecb7be76a7e2814578a145e471c9a567"></a><!-- doxytag: member="sf::StarShape::GetScale" ref="aecb7be76a7e2814578a145e471c9a567" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; sf::Transformable::GetScale </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the current scale of the object. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current scale factors</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a46f3510b3c7138966acadaccdd6ddc27" title="Set the scale factors of the object.">SetScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab079dac4be2b9e07a3b94857aa1db9af"></a><!-- doxytag: member="sf::StarShape::GetTexture" ref="ab079dac4be2b9e07a3b94857aa1db9af" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Texture.htm">Texture</a>* sf::Shape::GetTexture </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the source texture of the shape. </p>
<p>If the shape has no source texture, a NULL pointer is returned. The returned pointer is const, which means that you can't modify the texture when you retrieve it with this function.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Pointer to the shape's texture</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm#aa504985c807b0fad604d8f465b101eac" title="Change the source texture of the shape.">SetTexture</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a564c7f2e7d72b92f7f3f559e7fa15ae8"></a><!-- doxytag: member="sf::StarShape::GetTextureRect" ref="a564c7f2e7d72b92f7f3f559e7fa15ae8" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Rect.htm">IntRect</a>&amp; sf::Shape::GetTextureRect </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the sub-rectangle of the texture displayed by the shape. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a> rectangle of the shape</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm#a683942a1d9f73e3a4a4cce696f4de5a8" title="Set the sub-rectangle of the texture that the shape will display.">SetTextureRect</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8495105affb9cd380e43db2bedcae081"></a><!-- doxytag: member="sf::StarShape::GetTransform" ref="a8495105affb9cd380e43db2bedcae081" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Transform.htm">Transform</a>&amp; sf::Transformable::GetTransform </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the combined transform of the object. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a> combining the position/rotation/scale/origin of the object</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a8bcabc18a0bd9dc3f7dfba8a5f4e9a0c" title="Get the inverse of the combined transform of the object.">GetInverseTransform</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a321c61deeec0e579e2d2a3e48eaea3cb"></a><!-- doxytag: member="sf::StarShape::Move" ref="a321c61deeec0e579e2d2a3e48eaea3cb" args="(const Vector2f &amp;offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::Move </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>offset</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Move the object by a given offset. </p>
<p>This function adds to the current position of the object, unlike SetPosition which overwrites it. Thus, it is equivalent to the following code: </p>
<div class="fragment"><pre class="fragment"> <span class="keywordtype">object</span>.SetPosition(<span class="keywordtype">object</span>.<a class="code" href="classsf_1_1Transformable.htm#a9835d23abb46417d3b84d38b1794a5b0" title="Get the position of the object.">GetPosition</a>() + offset);
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>offset</em>&nbsp;</td><td>Offset</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a23e3447019dbf7737cf7157efdc3ad5f" title="Set the position of the object.">SetPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af059b6c94e8a92bbc14fb1e5057ef05f"></a><!-- doxytag: member="sf::StarShape::Move" ref="af059b6c94e8a92bbc14fb1e5057ef05f" args="(float offsetX, float offsetY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::Move </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>offsetX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>offsetY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Move the object by a given offset. </p>
<p>This function adds to the current position of the object, unlike SetPosition which overwrites it. Thus, it is equivalent to the following code: </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> pos = <span class="keywordtype">object</span>.GetPosition();
 <span class="keywordtype">object</span>.SetPosition(pos.<a class="code" href="classsf_1_1Vector2.htm#a1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> + offsetX, pos.<a class="code" href="classsf_1_1Vector2.htm#a420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> + offsetY);
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>offsetX</em>&nbsp;</td><td>X offset </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>offsetY</em>&nbsp;</td><td>Y offset</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a23e3447019dbf7737cf7157efdc3ad5f" title="Set the position of the object.">SetPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a551eae00ea66318a6fb88a97098c5c6a"></a><!-- doxytag: member="sf::StarShape::Rotate" ref="a551eae00ea66318a6fb88a97098c5c6a" args="(float angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::Rotate </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>angle</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate the object. </p>
<p>This function adds to the current rotation of the object, unlike SetRotation which overwrites it. Thus, it is equivalent to the following code: </p>
<div class="fragment"><pre class="fragment"> <span class="keywordtype">object</span>.SetRotation(<span class="keywordtype">object</span>.<a class="code" href="classsf_1_1Transformable.htm#a7322a76a688141ca6c1eaf4c760d87bf" title="Get the orientation of the object.">GetRotation</a>() + angle);
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>angle</em>&nbsp;</td><td>Angle of rotation, in degrees </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9152b4e86d27716a2593aae8ae951931"></a><!-- doxytag: member="sf::StarShape::Scale" ref="a9152b4e86d27716a2593aae8ae951931" args="(const Vector2f &amp;factor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::Scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>factor</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scale the object. </p>
<p>This function multiplies the current scale of the object, unlike SetScale which overwrites it. Thus, it is equivalent to the following code: </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> scale = <span class="keywordtype">object</span>.GetScale();
 <span class="keywordtype">object</span>.SetScale(scale.<a class="code" href="classsf_1_1Vector2.htm#a1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> * factor.x, scale.<a class="code" href="classsf_1_1Vector2.htm#a420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> * factor.y);
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>factor</em>&nbsp;</td><td>Scale factors</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a46f3510b3c7138966acadaccdd6ddc27" title="Set the scale factors of the object.">SetScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8ff62d6a41e4bbd4786730ee0eefddc9"></a><!-- doxytag: member="sf::StarShape::Scale" ref="a8ff62d6a41e4bbd4786730ee0eefddc9" args="(float factorX, float factorY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::Scale </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>factorX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>factorY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scale the object. </p>
<p>This function multiplies the current scale of the object, unlike SetScale which overwrites it. Thus, it is equivalent to the following code: </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> scale = <span class="keywordtype">object</span>.GetScale();
 <span class="keywordtype">object</span>.SetScale(scale.<a class="code" href="classsf_1_1Vector2.htm#a1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> * factorX, scale.<a class="code" href="classsf_1_1Vector2.htm#a420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> * factorY);
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>factorX</em>&nbsp;</td><td>Horizontal scale factor </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>factorY</em>&nbsp;</td><td>Vertical scale factor</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a46f3510b3c7138966acadaccdd6ddc27" title="Set the scale factors of the object.">SetScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a95e789deebb0ff62c2432e7d9208db5d"></a><!-- doxytag: member="sf::StarShape::SetFillColor" ref="a95e789deebb0ff62c2432e7d9208db5d" args="(const Color &amp;color)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::SetFillColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>color</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the fill color of the shape. </p>
<p>This color is modulated (multiplied) with the shape's texture if any. It can be used to colorize the shape, or change its global opacity. You can use <a class="el" href="classsf_1_1Color.htm#a569b45471737f770656f50ae7bbac292" title="Transparent (black) predefined color.">sf::Color::Transparent</a> to make the inside of the shape transparent, and have the outline alone. By default, the shape's fill color is opaque white.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>color</em>&nbsp;</td><td>New color of the shape</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm#af148835680669b50f099e6d8fefd28b5" title="Get the fill color of the shape.">GetFillColor</a>, <a class="el" href="classsf_1_1Shape.htm#a36725cb6bc3960c25ad8557497cd7c0e" title="Set the outline color of the shape.">SetOutlineColor</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9d1a8ff7843245fe9ba8287f2213268f"></a><!-- doxytag: member="sf::StarShape::SetInnerRadius" ref="a9d1a8ff7843245fe9ba8287f2213268f" args="(float radius)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::StarShape::SetInnerRadius </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>radius</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the inner radius of the star. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>radius</em>&nbsp;</td><td>New inner radius of the star</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1StarShape.htm#a92468bd2ce3972ec1c4c8276af8fad31" title="Get the inner radius of the star.">GetInnerRadius</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a794cec5a92a49691c7d610365b43f0c5"></a><!-- doxytag: member="sf::StarShape::SetOrigin" ref="a794cec5a92a49691c7d610365b43f0c5" args="(const Vector2f &amp;origin)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::SetOrigin </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>origin</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the local origin of the object. </p>
<p>The origin of an object defines the center point for all transformations (position, scale, rotation). The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation). The default origin of a transformable object is (0, 0).</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>origin</em>&nbsp;</td><td>New origin</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#aabdfd759cee3462216c1d24a4387b394" title="Get the local origin of the object.">GetOrigin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aff0049432eb92eb9b68c15c5d5bf9d4c"></a><!-- doxytag: member="sf::StarShape::SetOrigin" ref="aff0049432eb92eb9b68c15c5d5bf9d4c" args="(float x, float y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::SetOrigin </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the local origin of the object. </p>
<p>The origin of an object defines the center point for all transformations (position, scale, rotation). The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation). The default origin of a transformable object is (0, 0).</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X coordinate of the new origin </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y coordinate of the new origin</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#aabdfd759cee3462216c1d24a4387b394" title="Get the local origin of the object.">GetOrigin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab42807a59f501245be77333ec7c15d94"></a><!-- doxytag: member="sf::StarShape::SetOuterRadius" ref="ab42807a59f501245be77333ec7c15d94" args="(float radius)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::StarShape::SetOuterRadius </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>radius</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the outer radius of the star. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>radius</em>&nbsp;</td><td>New outer radius of the star</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1StarShape.htm#aae6da0526b9d090868199c786eb8333f" title="Get the outer radius of the star.">GetOuterRadius</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a36725cb6bc3960c25ad8557497cd7c0e"></a><!-- doxytag: member="sf::StarShape::SetOutlineColor" ref="a36725cb6bc3960c25ad8557497cd7c0e" args="(const Color &amp;color)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::SetOutlineColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>color</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the outline color of the shape. </p>
<p>You can use <a class="el" href="classsf_1_1Color.htm#a569b45471737f770656f50ae7bbac292" title="Transparent (black) predefined color.">sf::Color::Transparent</a> to disable the outline. By default, the shape's outline color is opaque white.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>color</em>&nbsp;</td><td>New outline color of the shape</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm#a5616fffb1b1afabb6ed258e649be07cf" title="Get the outline color of the shape.">GetOutlineColor</a>, <a class="el" href="classsf_1_1Shape.htm#a95e789deebb0ff62c2432e7d9208db5d" title="Set the fill color of the shape.">SetFillColor</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0094b9e71d54b22cf7960196b756cf5d"></a><!-- doxytag: member="sf::StarShape::SetOutlineThickness" ref="a0094b9e71d54b22cf7960196b756cf5d" args="(float thickness)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::SetOutlineThickness </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>thickness</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the thickness of the shape's outline. </p>
<p>This number cannot be negative. Using zero disables the outline. By default, the outline thickness is 0.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>thickness</em>&nbsp;</td><td>New outline thickness</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm#a0710225235c6badfb9a1044c70e4f8be" title="Get the outline thickness of the shape.">GetOutlineThickness</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab2ae4d53bb9d1a19b514fa22c5b28b5e"></a><!-- doxytag: member="sf::StarShape::SetPointsCount" ref="ab2ae4d53bb9d1a19b514fa22c5b28b5e" args="(unsigned int count)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::StarShape::SetPointsCount </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>count</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the number of points of the star. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>count</em>&nbsp;</td><td>New number of points of the star</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1StarShape.htm#ab53fbcb322e394fbcc949cc6d4ede5c1" title="Get the number of points of the star.">GetPointsCount</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9d89da0e2300b5f2f6e49f453705a1ec"></a><!-- doxytag: member="sf::StarShape::SetPosition" ref="a9d89da0e2300b5f2f6e49f453705a1ec" args="(const Vector2f &amp;position)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::SetPosition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>position</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the position of the object. </p>
<p>This function completely overwrites the previous position. See Move to apply an offset based on the previous position instead. The default position of a transformable object is (0, 0).</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>position</em>&nbsp;</td><td>New position</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#af059b6c94e8a92bbc14fb1e5057ef05f" title="Move the object by a given offset.">Move</a>, <a class="el" href="classsf_1_1Transformable.htm#a9835d23abb46417d3b84d38b1794a5b0" title="Get the position of the object.">GetPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a23e3447019dbf7737cf7157efdc3ad5f"></a><!-- doxytag: member="sf::StarShape::SetPosition" ref="a23e3447019dbf7737cf7157efdc3ad5f" args="(float x, float y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::SetPosition </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the position of the object. </p>
<p>This function completely overwrites the previous position. See Move to apply an offset based on the previous position instead. The default position of a transformable object is (0, 0).</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X coordinate of the new position </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y coordinate of the new position</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#af059b6c94e8a92bbc14fb1e5057ef05f" title="Move the object by a given offset.">Move</a>, <a class="el" href="classsf_1_1Transformable.htm#a9835d23abb46417d3b84d38b1794a5b0" title="Get the position of the object.">GetPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a32e251bce9d3ec1f6138f9c2620f1fdf"></a><!-- doxytag: member="sf::StarShape::SetRotation" ref="a32e251bce9d3ec1f6138f9c2620f1fdf" args="(float angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::SetRotation </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>angle</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the orientation of the object. </p>
<p>This function completely overwrites the previous rotation. See Rotate to add an angle based on the previous rotation instead. The default rotation of a transformable object is 0.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>angle</em>&nbsp;</td><td>New rotation, in degrees</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a551eae00ea66318a6fb88a97098c5c6a" title="Rotate the object.">Rotate</a>, <a class="el" href="classsf_1_1Transformable.htm#a7322a76a688141ca6c1eaf4c760d87bf" title="Get the orientation of the object.">GetRotation</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7965d61fc6baf35dd38f955afc44bd05"></a><!-- doxytag: member="sf::StarShape::SetScale" ref="a7965d61fc6baf35dd38f955afc44bd05" args="(const Vector2f &amp;factors)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::SetScale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>factors</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the scale factors of the object. </p>
<p><em>scale.x</em> and <em>scale.y</em> must be strictly positive, otherwise they are ignored. This function completely overwrites the previous scale. See Scale to add a factor based on the previous scale instead. The default scale of a transformable object is (1, 1).</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>factors</em>&nbsp;</td><td>New scale factors</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a8ff62d6a41e4bbd4786730ee0eefddc9" title="Scale the object.">Scale</a>, <a class="el" href="classsf_1_1Transformable.htm#aecb7be76a7e2814578a145e471c9a567" title="Get the current scale of the object.">GetScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a46f3510b3c7138966acadaccdd6ddc27"></a><!-- doxytag: member="sf::StarShape::SetScale" ref="a46f3510b3c7138966acadaccdd6ddc27" args="(float factorX, float factorY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Transformable::SetScale </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>factorX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>factorY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the scale factors of the object. </p>
<p><em>factorX</em> and <em>factorY</em> must be strictly positive, otherwise they are ignored. This function completely overwrites the previous scale. See Scale to add a factor based on the previous scale instead. The default scale of a transformable object is (1, 1).</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>factorX</em>&nbsp;</td><td>New horizontal scale factor </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>factorY</em>&nbsp;</td><td>New vertical scale factor</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a8ff62d6a41e4bbd4786730ee0eefddc9" title="Scale the object.">Scale</a>, <a class="el" href="classsf_1_1Transformable.htm#aecb7be76a7e2814578a145e471c9a567" title="Get the current scale of the object.">GetScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa504985c807b0fad604d8f465b101eac"></a><!-- doxytag: member="sf::StarShape::SetTexture" ref="aa504985c807b0fad604d8f465b101eac" args="(const Texture *texture, bool resetRect=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::SetTexture </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Texture.htm">Texture</a> *&nbsp;</td>
          <td class="paramname"> <em>texture</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>resetRect</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the source texture of the shape. </p>
<p>The <em>texture</em> argument refers to a texture that must exist as long as the shape uses it. Indeed, the shape doesn't store its own copy of the texture, but rather keeps a pointer to the one that you passed to this function. If the source texture is destroyed and the shape tries to use it, the behaviour is undefined. <em>texture</em> can be NULL to disable texturing. If <em>resetRect</em> is true, the TextureRect property of the shape is automatically adjusted to the size of the new texture. If it is false, the texture rect is left unchanged.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>texture</em>&nbsp;</td><td>New texture </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>resetRect</em>&nbsp;</td><td>Should the texture rect be reset to the size of the new texture?</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm#ab079dac4be2b9e07a3b94857aa1db9af" title="Get the source texture of the shape.">GetTexture</a>, <a class="el" href="classsf_1_1Shape.htm#a683942a1d9f73e3a4a4cce696f4de5a8" title="Set the sub-rectangle of the texture that the shape will display.">SetTextureRect</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a683942a1d9f73e3a4a4cce696f4de5a8"></a><!-- doxytag: member="sf::StarShape::SetTextureRect" ref="a683942a1d9f73e3a4a4cce696f4de5a8" args="(const IntRect &amp;rect)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::SetTextureRect </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>rect</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the sub-rectangle of the texture that the shape will display. </p>
<p>The texture rect is useful when you don't want to display the whole texture, but rather a part of it. By default, the texture rect covers the entire texture.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rect</em>&nbsp;</td><td>Rectangle defining the region of the texture to display</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Shape.htm#a564c7f2e7d72b92f7f3f559e7fa15ae8" title="Get the sub-rectangle of the texture displayed by the shape.">GetTextureRect</a>, <a class="el" href="classsf_1_1Shape.htm#aa504985c807b0fad604d8f465b101eac" title="Change the source texture of the shape.">SetTexture</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a477978650b42a0d6b3b234baeb7a093c"></a><!-- doxytag: member="sf::StarShape::Update" ref="a477978650b42a0d6b3b234baeb7a093c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::Update </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Recompute the internal geometry of the shape. </p>
<p>This function must be called by the derived class everytime the shape's points change (ie. the result of either GetPointsCount or GetPoint is different). </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="StarShape_8hpp_source.htm">StarShape.hpp</a></li>
</ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
