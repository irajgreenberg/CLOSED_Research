<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1RenderStates.htm">RenderStates</a>
  </div>
</div>
<div class="contents">
<h1>sf::RenderStates Class Reference<br/>
<small>
[<a class="el" href="group__graphics.htm">Graphics module</a>]</small>
</h1><!-- doxytag: class="sf::RenderStates" -->
<p>Define the states used for drawing to a <a class="el" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, .">RenderTarget</a>.  
<a href="#_details">More...</a></p>

<p><code>#include &lt;<a class="el" href="RenderStates_8hpp_source.htm">RenderStates.hpp</a>&gt;</code></p>

<p><a href="classsf_1_1RenderStates-members.htm">List of all members.</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#a885bf14070d0d5391f062f62b270b7d0">RenderStates</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#a885bf14070d0d5391f062f62b270b7d0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#a4e3378a224f67513b95d58184e85210c">RenderStates</a> (<a class="el" href="group__graphics.htm#ga80c52fe2f7050d7f7573b7ed3c995388">BlendMode</a> theBlendMode)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct a default set of render states with a custom blend mode.  <a href="#a4e3378a224f67513b95d58184e85210c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#a3e99cad6ab05971d40357949930ed890">RenderStates</a> (const <a class="el" href="classsf_1_1Transform.htm">Transform</a> &amp;theTransform)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct a default set of render states with a custom transform.  <a href="#a3e99cad6ab05971d40357949930ed890"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#a8f4ca3be0e27dafea0c4ab8547439bb1">RenderStates</a> (const <a class="el" href="classsf_1_1Texture.htm">Texture</a> *theTexture)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct a default set of render states with a custom texture.  <a href="#a8f4ca3be0e27dafea0c4ab8547439bb1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#a39f94233f464739d8d8522f3aefe97d0">RenderStates</a> (const <a class="el" href="classsf_1_1Shader.htm">Shader</a> *theShader)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct a default set of render states with a custom shader.  <a href="#a39f94233f464739d8d8522f3aefe97d0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#ae508c91ac7b8992dc22b8d8a4027ad09">RenderStates</a> (<a class="el" href="group__graphics.htm#ga80c52fe2f7050d7f7573b7ed3c995388">BlendMode</a> theBlendMode, const <a class="el" href="classsf_1_1Transform.htm">Transform</a> &amp;theTransform, const <a class="el" href="classsf_1_1Texture.htm">Texture</a> *theTexture, const <a class="el" href="classsf_1_1Shader.htm">Shader</a> *theShader)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct a set of render states with all its attributes.  <a href="#ae508c91ac7b8992dc22b8d8a4027ad09"></a><br/></td></tr>
<tr><td colspan="2"><h2>Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__graphics.htm#ga80c52fe2f7050d7f7573b7ed3c995388">BlendMode</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#ad6ac87f1b5006dae7ebfee4b5d40f5a8">blendMode</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Blending mode.  <a href="#ad6ac87f1b5006dae7ebfee4b5d40f5a8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Transform.htm">Transform</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#a1f737981a0f2f0d4bb8dac866a8d1149">transform</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a>.  <a href="#a1f737981a0f2f0d4bb8dac866a8d1149"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Texture.htm">Texture</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#a457fc5a41731889de9cf39cf9b3436c3">texture</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>.  <a href="#a457fc5a41731889de9cf39cf9b3436c3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Shader.htm">Shader</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#ad4f79ecdd0c60ed0d24fbe555b221bd8">shader</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classsf_1_1Shader.htm" title="Shader class (vertex and fragment).">Shader</a>.  <a href="#ad4f79ecdd0c60ed0d24fbe555b221bd8"></a><br/></td></tr>
<tr><td colspan="2"><h2>Static Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1RenderStates.htm">RenderStates</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderStates.htm#ad29672df29f19ce50c3021d95f2bb062">Default</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Special instance holding the default render states.  <a href="#ad29672df29f19ce50c3021d95f2bb062"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Define the states used for drawing to a <a class="el" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, .">RenderTarget</a>. </p>
<p>There are four global states that can be applied to the drawn objects:</p>
<ul>
<li>the blend mode: how pixels of the object are blended with the background </li>
<li>the transform: how the object is positioned/rotated/scaled </li>
<li>the texture: what image is mapped to the object </li>
<li>the shader: what custom effect is applied to the object</li>
</ul>
<p>High-level objects such as sprites or text force some of these states when they are drawn. For example, a sprite will set its own texture, so that you don't have to care about it when drawing the sprite.</p>
<p>The transform is a special case: sprites, texts and shapes (and it's a good idea to do it with your own drawable classes too) combine their transform with the one that is passed in the <a class="el" href="classsf_1_1RenderStates.htm" title="Define the states used for drawing to a RenderTarget.">RenderStates</a> structure. So that you can use a "global" transform on top of each object's transform.</p>
<p>Most objects, especially high-level drawables, can be drawn directly without defining render states explicitely -- the default set of states is ok in most cases. </p>
<div class="fragment"><pre class="fragment"> window.Draw(sprite);
</pre></div><p>If you want to use a single specific render state, for example a shader, you can pass it directly to the Draw function: <a class="el" href="classsf_1_1RenderStates.htm" title="Define the states used for drawing to a RenderTarget.">sf::RenderStates</a> has an implicit one-argument constructor for each state. </p>
<div class="fragment"><pre class="fragment"> window.draw(sprite, <a class="code" href="classsf_1_1RenderStates.htm#ad4f79ecdd0c60ed0d24fbe555b221bd8" title="Shader.">shader</a>);
</pre></div><p>When you're inside the Draw function of a drawable object (inherited from <a class="el" href="classsf_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target.">sf::Drawable</a>), you can either pass the render states unmodified, or change some of them. For example, a transformable object will combine the current transform with its own transform. A sprite will set its texture. Etc.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, .">sf::RenderTarget</a>, <a class="el" href="classsf_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target.">sf::Drawable</a> </dd></dl>

<p>Definition at line <a class="el" href="RenderStates_8hpp_source.htm#l00045">45</a> of file <a class="el" href="RenderStates_8hpp_source.htm">RenderStates.hpp</a>.</p>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a885bf14070d0d5391f062f62b270b7d0"></a><!-- doxytag: member="sf::RenderStates::RenderStates" ref="a885bf14070d0d5391f062f62b270b7d0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderStates::RenderStates </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>
<p>Constructing a default set of render states is equivalent to using <a class="el" href="classsf_1_1RenderStates.htm#ad29672df29f19ce50c3021d95f2bb062" title="Special instance holding the default render states.">sf::RenderStates::Default</a>. The default set defines: </p>
<ul>
<li>the BlendAlpha blend mode </li>
<li>the identity transform </li>
<li>a null texture </li>
<li>a null shader </li>
</ul>

</div>
</div>
<a class="anchor" id="a4e3378a224f67513b95d58184e85210c"></a><!-- doxytag: member="sf::RenderStates::RenderStates" ref="a4e3378a224f67513b95d58184e85210c" args="(BlendMode theBlendMode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderStates::RenderStates </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__graphics.htm#ga80c52fe2f7050d7f7573b7ed3c995388">BlendMode</a>&nbsp;</td>
          <td class="paramname"> <em>theBlendMode</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a default set of render states with a custom blend mode. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>theBlendMode</em>&nbsp;</td><td>Blend mode to use </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3e99cad6ab05971d40357949930ed890"></a><!-- doxytag: member="sf::RenderStates::RenderStates" ref="a3e99cad6ab05971d40357949930ed890" args="(const Transform &amp;theTransform)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderStates::RenderStates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Transform.htm">Transform</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>theTransform</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a default set of render states with a custom transform. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>theTransform</em>&nbsp;</td><td><a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a> to use </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8f4ca3be0e27dafea0c4ab8547439bb1"></a><!-- doxytag: member="sf::RenderStates::RenderStates" ref="a8f4ca3be0e27dafea0c4ab8547439bb1" args="(const Texture *theTexture)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderStates::RenderStates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Texture.htm">Texture</a> *&nbsp;</td>
          <td class="paramname"> <em>theTexture</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a default set of render states with a custom texture. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>theTexture</em>&nbsp;</td><td><a class="el" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a> to use </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a39f94233f464739d8d8522f3aefe97d0"></a><!-- doxytag: member="sf::RenderStates::RenderStates" ref="a39f94233f464739d8d8522f3aefe97d0" args="(const Shader *theShader)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderStates::RenderStates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Shader.htm">Shader</a> *&nbsp;</td>
          <td class="paramname"> <em>theShader</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a default set of render states with a custom shader. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>theShader</em>&nbsp;</td><td><a class="el" href="classsf_1_1Shader.htm" title="Shader class (vertex and fragment).">Shader</a> to use </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae508c91ac7b8992dc22b8d8a4027ad09"></a><!-- doxytag: member="sf::RenderStates::RenderStates" ref="ae508c91ac7b8992dc22b8d8a4027ad09" args="(BlendMode theBlendMode, const Transform &amp;theTransform, const Texture *theTexture, const Shader *theShader)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderStates::RenderStates </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__graphics.htm#ga80c52fe2f7050d7f7573b7ed3c995388">BlendMode</a>&nbsp;</td>
          <td class="paramname"> <em>theBlendMode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Transform.htm">Transform</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>theTransform</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Texture.htm">Texture</a> *&nbsp;</td>
          <td class="paramname"> <em>theTexture</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Shader.htm">Shader</a> *&nbsp;</td>
          <td class="paramname"> <em>theShader</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a set of render states with all its attributes. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>theBlendMode</em>&nbsp;</td><td>Blend mode to use </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>theTransform</em>&nbsp;</td><td><a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a> to use </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>theTexture</em>&nbsp;</td><td><a class="el" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a> to use </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>theShader</em>&nbsp;</td><td><a class="el" href="classsf_1_1Shader.htm" title="Shader class (vertex and fragment).">Shader</a> to use </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="ad6ac87f1b5006dae7ebfee4b5d40f5a8"></a><!-- doxytag: member="sf::RenderStates::blendMode" ref="ad6ac87f1b5006dae7ebfee4b5d40f5a8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__graphics.htm#ga80c52fe2f7050d7f7573b7ed3c995388">BlendMode</a> <a class="el" href="classsf_1_1RenderStates.htm#ad6ac87f1b5006dae7ebfee4b5d40f5a8">sf::RenderStates::blendMode</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Blending mode. </p>

<p>Definition at line <a class="el" href="RenderStates_8hpp_source.htm#l00115">115</a> of file <a class="el" href="RenderStates_8hpp_source.htm">RenderStates.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="ad29672df29f19ce50c3021d95f2bb062"></a><!-- doxytag: member="sf::RenderStates::Default" ref="ad29672df29f19ce50c3021d95f2bb062" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1RenderStates.htm">RenderStates</a> <a class="el" href="classsf_1_1RenderStates.htm#ad29672df29f19ce50c3021d95f2bb062">sf::RenderStates::Default</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Special instance holding the default render states. </p>

<p>Definition at line <a class="el" href="RenderStates_8hpp_source.htm#l00110">110</a> of file <a class="el" href="RenderStates_8hpp_source.htm">RenderStates.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="ad4f79ecdd0c60ed0d24fbe555b221bd8"></a><!-- doxytag: member="sf::RenderStates::shader" ref="ad4f79ecdd0c60ed0d24fbe555b221bd8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Shader.htm">Shader</a>* <a class="el" href="classsf_1_1RenderStates.htm#ad4f79ecdd0c60ed0d24fbe555b221bd8">sf::RenderStates::shader</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><a class="el" href="classsf_1_1Shader.htm" title="Shader class (vertex and fragment).">Shader</a>. </p>

<p>Definition at line <a class="el" href="RenderStates_8hpp_source.htm#l00118">118</a> of file <a class="el" href="RenderStates_8hpp_source.htm">RenderStates.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a457fc5a41731889de9cf39cf9b3436c3"></a><!-- doxytag: member="sf::RenderStates::texture" ref="a457fc5a41731889de9cf39cf9b3436c3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Texture.htm">Texture</a>* <a class="el" href="classsf_1_1RenderStates.htm#a457fc5a41731889de9cf39cf9b3436c3">sf::RenderStates::texture</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><a class="el" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>. </p>

<p>Definition at line <a class="el" href="RenderStates_8hpp_source.htm#l00117">117</a> of file <a class="el" href="RenderStates_8hpp_source.htm">RenderStates.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a1f737981a0f2f0d4bb8dac866a8d1149"></a><!-- doxytag: member="sf::RenderStates::transform" ref="a1f737981a0f2f0d4bb8dac866a8d1149" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Transform.htm">Transform</a> <a class="el" href="classsf_1_1RenderStates.htm#a1f737981a0f2f0d4bb8dac866a8d1149">sf::RenderStates::transform</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a>. </p>

<p>Definition at line <a class="el" href="RenderStates_8hpp_source.htm#l00116">116</a> of file <a class="el" href="RenderStates_8hpp_source.htm">RenderStates.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="RenderStates_8hpp_source.htm">RenderStates.hpp</a></li>
</ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
