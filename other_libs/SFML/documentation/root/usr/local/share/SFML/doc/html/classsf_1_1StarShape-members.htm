<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>sf::StarShape Member List</h1>This is the complete list of members for <a class="el" href="classsf_1_1StarShape.htm">sf::StarShape</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#af148835680669b50f099e6d8fefd28b5">GetFillColor</a>() const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#ad8bbca3a35c836bddd357bb0adc841da">GetGlobalBounds</a>() const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1StarShape.htm#a92468bd2ce3972ec1c4c8276af8fad31">GetInnerRadius</a>() const </td><td><a class="el" href="classsf_1_1StarShape.htm">sf::StarShape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a8bcabc18a0bd9dc3f7dfba8a5f4e9a0c">GetInverseTransform</a>() const </td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#aacb095e40da9f6b7eaddc90d271b9e9e">GetLocalBounds</a>() const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#aabdfd759cee3462216c1d24a4387b394">GetOrigin</a>() const </td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1StarShape.htm#aae6da0526b9d090868199c786eb8333f">GetOuterRadius</a>() const </td><td><a class="el" href="classsf_1_1StarShape.htm">sf::StarShape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#a5616fffb1b1afabb6ed258e649be07cf">GetOutlineColor</a>() const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#a0710225235c6badfb9a1044c70e4f8be">GetOutlineThickness</a>() const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1StarShape.htm#ab53fbcb322e394fbcc949cc6d4ede5c1">GetPointsCount</a>() const </td><td><a class="el" href="classsf_1_1StarShape.htm">sf::StarShape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a9835d23abb46417d3b84d38b1794a5b0">GetPosition</a>() const </td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a7322a76a688141ca6c1eaf4c760d87bf">GetRotation</a>() const </td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#aecb7be76a7e2814578a145e471c9a567">GetScale</a>() const </td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#ab079dac4be2b9e07a3b94857aa1db9af">GetTexture</a>() const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#a564c7f2e7d72b92f7f3f559e7fa15ae8">GetTextureRect</a>() const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a8495105affb9cd380e43db2bedcae081">GetTransform</a>() const </td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#af059b6c94e8a92bbc14fb1e5057ef05f">Move</a>(float offsetX, float offsetY)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a321c61deeec0e579e2d2a3e48eaea3cb">Move</a>(const Vector2f &amp;offset)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a551eae00ea66318a6fb88a97098c5c6a">Rotate</a>(float angle)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a8ff62d6a41e4bbd4786730ee0eefddc9">Scale</a>(float factorX, float factorY)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a9152b4e86d27716a2593aae8ae951931">Scale</a>(const Vector2f &amp;factor)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#a95e789deebb0ff62c2432e7d9208db5d">SetFillColor</a>(const Color &amp;color)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1StarShape.htm#a9d1a8ff7843245fe9ba8287f2213268f">SetInnerRadius</a>(float radius)</td><td><a class="el" href="classsf_1_1StarShape.htm">sf::StarShape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#aff0049432eb92eb9b68c15c5d5bf9d4c">SetOrigin</a>(float x, float y)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a794cec5a92a49691c7d610365b43f0c5">SetOrigin</a>(const Vector2f &amp;origin)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1StarShape.htm#ab42807a59f501245be77333ec7c15d94">SetOuterRadius</a>(float radius)</td><td><a class="el" href="classsf_1_1StarShape.htm">sf::StarShape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#a36725cb6bc3960c25ad8557497cd7c0e">SetOutlineColor</a>(const Color &amp;color)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#a0094b9e71d54b22cf7960196b756cf5d">SetOutlineThickness</a>(float thickness)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1StarShape.htm#ab2ae4d53bb9d1a19b514fa22c5b28b5e">SetPointsCount</a>(unsigned int count)</td><td><a class="el" href="classsf_1_1StarShape.htm">sf::StarShape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a23e3447019dbf7737cf7157efdc3ad5f">SetPosition</a>(float x, float y)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a9d89da0e2300b5f2f6e49f453705a1ec">SetPosition</a>(const Vector2f &amp;position)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a32e251bce9d3ec1f6138f9c2620f1fdf">SetRotation</a>(float angle)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a46f3510b3c7138966acadaccdd6ddc27">SetScale</a>(float factorX, float factorY)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#a7965d61fc6baf35dd38f955afc44bd05">SetScale</a>(const Vector2f &amp;factors)</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#aa504985c807b0fad604d8f465b101eac">SetTexture</a>(const Texture *texture, bool resetRect=false)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#a683942a1d9f73e3a4a4cce696f4de5a8">SetTextureRect</a>(const IntRect &amp;rect)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#a413a457f720835b9f5d8e97ca8b80960">Shape</a>()</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1StarShape.htm#a2bd6cb1ed84544cd4f8ca79b7f18aee8">StarShape</a>()</td><td><a class="el" href="classsf_1_1StarShape.htm">sf::StarShape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1StarShape.htm#a72d06658a1c6069285859531ab9b8ca8">StarShape</a>(float innerRadius, float outerRadius, unsigned int pointsCount)</td><td><a class="el" href="classsf_1_1StarShape.htm">sf::StarShape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transformable.htm#ae71710de0fef423121bab1c684954a2e">Transformable</a>()</td><td><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#a477978650b42a0d6b3b234baeb7a093c">Update</a>()</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#a906002f2df7beb5edbddf5bbef96f120">~Drawable</a>()</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#a2262aceb9df52d4275c19633592f19bf">~Shape</a>()</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td><code> [virtual]</code></td></tr>
</table></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
